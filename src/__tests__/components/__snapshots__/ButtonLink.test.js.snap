// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders without crashing 1`] = `
<MemoryRouter
  initialEntries={
    Array [
      Object {
        "key": "testKey",
        "pathname": "/",
      },
    ]
  }
>
  <Router
    history={
      Object {
        "action": "POP",
        "block": [Function],
        "canGo": [Function],
        "createHref": [Function],
        "entries": Array [
          Object {
            "hash": "",
            "key": "testKey",
            "pathname": "/",
            "search": "",
          },
        ],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "index": 0,
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "key": "testKey",
          "pathname": "/",
          "search": "",
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <ButtonLink
      primary="See my portfolio"
      to="/portfolio"
      variant="outlined"
    >
      <WithStyles(ForwardRef(Button))
        component={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "render": [Function],
          }
        }
        variant="outlined"
      >
        <ForwardRef(Button)
          classes={
            Object {
              "colorInherit": "MuiButton-colorInherit",
              "contained": "MuiButton-contained",
              "containedPrimary": "MuiButton-containedPrimary",
              "containedSecondary": "MuiButton-containedSecondary",
              "containedSizeLarge": "MuiButton-containedSizeLarge",
              "containedSizeSmall": "MuiButton-containedSizeSmall",
              "disableElevation": "MuiButton-disableElevation",
              "disabled": "Mui-disabled",
              "endIcon": "MuiButton-endIcon",
              "focusVisible": "Mui-focusVisible",
              "fullWidth": "MuiButton-fullWidth",
              "iconSizeLarge": "MuiButton-iconSizeLarge",
              "iconSizeMedium": "MuiButton-iconSizeMedium",
              "iconSizeSmall": "MuiButton-iconSizeSmall",
              "label": "MuiButton-label",
              "outlined": "MuiButton-outlined",
              "outlinedPrimary": "MuiButton-outlinedPrimary",
              "outlinedSecondary": "MuiButton-outlinedSecondary",
              "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
              "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
              "root": "MuiButton-root",
              "sizeLarge": "MuiButton-sizeLarge",
              "sizeSmall": "MuiButton-sizeSmall",
              "startIcon": "MuiButton-startIcon",
              "text": "MuiButton-text",
              "textPrimary": "MuiButton-textPrimary",
              "textSecondary": "MuiButton-textSecondary",
              "textSizeLarge": "MuiButton-textSizeLarge",
              "textSizeSmall": "MuiButton-textSizeSmall",
            }
          }
          component={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "render": [Function],
            }
          }
          variant="outlined"
        >
          <WithStyles(ForwardRef(ButtonBase))
            className="MuiButton-root MuiButton-outlined"
            component={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "render": [Function],
              }
            }
            disabled={false}
            focusRipple={true}
            focusVisibleClassName="Mui-focusVisible"
            type="button"
          >
            <ForwardRef(ButtonBase)
              className="MuiButton-root MuiButton-outlined"
              classes={
                Object {
                  "disabled": "Mui-disabled",
                  "focusVisible": "Mui-focusVisible",
                  "root": "MuiButtonBase-root",
                }
              }
              component={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "render": [Function],
                }
              }
              disabled={false}
              focusRipple={true}
              focusVisibleClassName="Mui-focusVisible"
              type="button"
            >
              <ForwardRef(renderLink)
                aria-disabled={false}
                className="MuiButtonBase-root MuiButton-root MuiButton-outlined"
                onBlur={[Function]}
                onDragLeave={[Function]}
                onFocus={[Function]}
                onKeyDown={[Function]}
                onKeyUp={[Function]}
                onMouseDown={[Function]}
                onMouseLeave={[Function]}
                onMouseUp={[Function]}
                onTouchEnd={[Function]}
                onTouchMove={[Function]}
                onTouchStart={[Function]}
                role="button"
                tabIndex={0}
              >
                <Link
                  aria-disabled={false}
                  className="MuiButtonBase-root MuiButton-root MuiButton-outlined"
                  onBlur={[Function]}
                  onDragLeave={[Function]}
                  onFocus={[Function]}
                  onKeyDown={[Function]}
                  onKeyUp={[Function]}
                  onMouseDown={[Function]}
                  onMouseLeave={[Function]}
                  onMouseUp={[Function]}
                  onTouchEnd={[Function]}
                  onTouchMove={[Function]}
                  onTouchStart={[Function]}
                  role="button"
                  tabIndex={0}
                  to="/portfolio"
                >
                  <LinkAnchor
                    aria-disabled={false}
                    className="MuiButtonBase-root MuiButton-root MuiButton-outlined"
                    href="/portfolio"
                    navigate={[Function]}
                    onBlur={[Function]}
                    onDragLeave={[Function]}
                    onFocus={[Function]}
                    onKeyDown={[Function]}
                    onKeyUp={[Function]}
                    onMouseDown={[Function]}
                    onMouseLeave={[Function]}
                    onMouseUp={[Function]}
                    onTouchEnd={[Function]}
                    onTouchMove={[Function]}
                    onTouchStart={[Function]}
                    role="button"
                    tabIndex={0}
                  >
                    <a
                      aria-disabled={false}
                      className="MuiButtonBase-root MuiButton-root MuiButton-outlined"
                      href="/portfolio"
                      onBlur={[Function]}
                      onClick={[Function]}
                      onDragLeave={[Function]}
                      onFocus={[Function]}
                      onKeyDown={[Function]}
                      onKeyUp={[Function]}
                      onMouseDown={[Function]}
                      onMouseLeave={[Function]}
                      onMouseUp={[Function]}
                      onTouchEnd={[Function]}
                      onTouchMove={[Function]}
                      onTouchStart={[Function]}
                      role="button"
                      tabIndex={0}
                    >
                      <span
                        className="MuiButton-label"
                      >
                        See my portfolio
                      </span>
                      <WithStyles(memo)
                        center={false}
                      >
                        <ForwardRef(TouchRipple)
                          center={false}
                          classes={
                            Object {
                              "child": "MuiTouchRipple-child",
                              "childLeaving": "MuiTouchRipple-childLeaving",
                              "childPulsate": "MuiTouchRipple-childPulsate",
                              "ripple": "MuiTouchRipple-ripple",
                              "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                              "rippleVisible": "MuiTouchRipple-rippleVisible",
                              "root": "MuiTouchRipple-root",
                            }
                          }
                        >
                          <span
                            className="MuiTouchRipple-root"
                          >
                            <TransitionGroup
                              childFactory={[Function]}
                              component={null}
                              exit={true}
                            />
                          </span>
                        </ForwardRef(TouchRipple)>
                      </WithStyles(memo)>
                    </a>
                  </LinkAnchor>
                </Link>
              </ForwardRef(renderLink)>
            </ForwardRef(ButtonBase)>
          </WithStyles(ForwardRef(ButtonBase))>
        </ForwardRef(Button)>
      </WithStyles(ForwardRef(Button))>
    </ButtonLink>
  </Router>
</MemoryRouter>
`;
