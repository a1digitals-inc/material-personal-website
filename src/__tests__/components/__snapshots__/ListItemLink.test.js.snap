// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders without crashing 1`] = `
<MemoryRouter
  initialEntries={
    Array [
      Object {
        "key": "testKey",
        "pathname": "/",
      },
    ]
  }
>
  <Router
    history={
      Object {
        "action": "POP",
        "block": [Function],
        "canGo": [Function],
        "createHref": [Function],
        "entries": Array [
          Object {
            "hash": "",
            "key": "testKey",
            "pathname": "/",
            "search": "",
          },
        ],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "index": 0,
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "key": "testKey",
          "pathname": "/",
          "search": "",
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <ListItemLink
      handleClick={[MockFunction]}
      icon={
        <FontAwesomeIcon
          border={false}
          className=""
          fixedWidth={false}
          flip={null}
          icon="home"
          inverse={false}
          listItem={false}
          mask={null}
          pull={null}
          pulse={false}
          rotation={null}
          size={null}
          spin={false}
          swapOpacity={false}
          symbol={false}
          title=""
          transform={null}
        />
      }
      primary="Home"
      to="/"
    >
      <li>
        <WithStyles(ForwardRef(ListItem))
          button={true}
          component={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "render": [Function],
            }
          }
          onClick={[MockFunction]}
        >
          <ForwardRef(ListItem)
            button={true}
            classes={
              Object {
                "alignItemsFlexStart": "MuiListItem-alignItemsFlexStart",
                "button": "MuiListItem-button",
                "container": "MuiListItem-container",
                "dense": "MuiListItem-dense",
                "disabled": "Mui-disabled",
                "divider": "MuiListItem-divider",
                "focusVisible": "Mui-focusVisible",
                "gutters": "MuiListItem-gutters",
                "root": "MuiListItem-root",
                "secondaryAction": "MuiListItem-secondaryAction",
                "selected": "Mui-selected",
              }
            }
            component={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "render": [Function],
              }
            }
            onClick={[MockFunction]}
          >
            <WithStyles(ForwardRef(ButtonBase))
              className="MuiListItem-root MuiListItem-gutters MuiListItem-button"
              component={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "render": [Function],
                }
              }
              disabled={false}
              focusVisibleClassName="Mui-focusVisible"
              onClick={[MockFunction]}
            >
              <ForwardRef(ButtonBase)
                className="MuiListItem-root MuiListItem-gutters MuiListItem-button"
                classes={
                  Object {
                    "disabled": "Mui-disabled",
                    "focusVisible": "Mui-focusVisible",
                    "root": "MuiButtonBase-root",
                  }
                }
                component={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "render": [Function],
                  }
                }
                disabled={false}
                focusVisibleClassName="Mui-focusVisible"
                onClick={[MockFunction]}
              >
                <ForwardRef(renderLink)
                  aria-disabled={false}
                  className="MuiButtonBase-root MuiListItem-root MuiListItem-gutters MuiListItem-button"
                  onBlur={[Function]}
                  onClick={[MockFunction]}
                  onDragLeave={[Function]}
                  onFocus={[Function]}
                  onKeyDown={[Function]}
                  onKeyUp={[Function]}
                  onMouseDown={[Function]}
                  onMouseLeave={[Function]}
                  onMouseUp={[Function]}
                  onTouchEnd={[Function]}
                  onTouchMove={[Function]}
                  onTouchStart={[Function]}
                  role="button"
                  tabIndex={0}
                >
                  <Link
                    aria-disabled={false}
                    className="MuiButtonBase-root MuiListItem-root MuiListItem-gutters MuiListItem-button"
                    onBlur={[Function]}
                    onClick={[MockFunction]}
                    onDragLeave={[Function]}
                    onFocus={[Function]}
                    onKeyDown={[Function]}
                    onKeyUp={[Function]}
                    onMouseDown={[Function]}
                    onMouseLeave={[Function]}
                    onMouseUp={[Function]}
                    onTouchEnd={[Function]}
                    onTouchMove={[Function]}
                    onTouchStart={[Function]}
                    role="button"
                    tabIndex={0}
                    to="/"
                  >
                    <LinkAnchor
                      aria-disabled={false}
                      className="MuiButtonBase-root MuiListItem-root MuiListItem-gutters MuiListItem-button"
                      href="/"
                      navigate={[Function]}
                      onBlur={[Function]}
                      onClick={[MockFunction]}
                      onDragLeave={[Function]}
                      onFocus={[Function]}
                      onKeyDown={[Function]}
                      onKeyUp={[Function]}
                      onMouseDown={[Function]}
                      onMouseLeave={[Function]}
                      onMouseUp={[Function]}
                      onTouchEnd={[Function]}
                      onTouchMove={[Function]}
                      onTouchStart={[Function]}
                      role="button"
                      tabIndex={0}
                    >
                      <a
                        aria-disabled={false}
                        className="MuiButtonBase-root MuiListItem-root MuiListItem-gutters MuiListItem-button"
                        href="/"
                        onBlur={[Function]}
                        onClick={[Function]}
                        onDragLeave={[Function]}
                        onFocus={[Function]}
                        onKeyDown={[Function]}
                        onKeyUp={[Function]}
                        onMouseDown={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                        onTouchEnd={[Function]}
                        onTouchMove={[Function]}
                        onTouchStart={[Function]}
                        role="button"
                        tabIndex={0}
                      >
                        <WithStyles(ForwardRef(Typography))
                          display="block"
                          key=".0"
                          variant="button"
                        >
                          <ForwardRef(Typography)
                            classes={
                              Object {
                                "alignCenter": "MuiTypography-alignCenter",
                                "alignJustify": "MuiTypography-alignJustify",
                                "alignLeft": "MuiTypography-alignLeft",
                                "alignRight": "MuiTypography-alignRight",
                                "body1": "MuiTypography-body1",
                                "body2": "MuiTypography-body2",
                                "button": "MuiTypography-button",
                                "caption": "MuiTypography-caption",
                                "colorError": "MuiTypography-colorError",
                                "colorInherit": "MuiTypography-colorInherit",
                                "colorPrimary": "MuiTypography-colorPrimary",
                                "colorSecondary": "MuiTypography-colorSecondary",
                                "colorTextPrimary": "MuiTypography-colorTextPrimary",
                                "colorTextSecondary": "MuiTypography-colorTextSecondary",
                                "displayBlock": "MuiTypography-displayBlock",
                                "displayInline": "MuiTypography-displayInline",
                                "gutterBottom": "MuiTypography-gutterBottom",
                                "h1": "MuiTypography-h1",
                                "h2": "MuiTypography-h2",
                                "h3": "MuiTypography-h3",
                                "h4": "MuiTypography-h4",
                                "h5": "MuiTypography-h5",
                                "h6": "MuiTypography-h6",
                                "noWrap": "MuiTypography-noWrap",
                                "overline": "MuiTypography-overline",
                                "paragraph": "MuiTypography-paragraph",
                                "root": "MuiTypography-root",
                                "srOnly": "MuiTypography-srOnly",
                                "subtitle1": "MuiTypography-subtitle1",
                                "subtitle2": "MuiTypography-subtitle2",
                              }
                            }
                            display="block"
                            variant="button"
                          >
                            <span
                              className="MuiTypography-root MuiTypography-button MuiTypography-displayBlock"
                            >
                              Home
                            </span>
                          </ForwardRef(Typography)>
                        </WithStyles(ForwardRef(Typography))>
                        <WithStyles(memo)
                          center={false}
                        >
                          <ForwardRef(TouchRipple)
                            center={false}
                            classes={
                              Object {
                                "child": "MuiTouchRipple-child",
                                "childLeaving": "MuiTouchRipple-childLeaving",
                                "childPulsate": "MuiTouchRipple-childPulsate",
                                "ripple": "MuiTouchRipple-ripple",
                                "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                "rippleVisible": "MuiTouchRipple-rippleVisible",
                                "root": "MuiTouchRipple-root",
                              }
                            }
                          >
                            <span
                              className="MuiTouchRipple-root"
                            >
                              <TransitionGroup
                                childFactory={[Function]}
                                component={null}
                                exit={true}
                              />
                            </span>
                          </ForwardRef(TouchRipple)>
                        </WithStyles(memo)>
                      </a>
                    </LinkAnchor>
                  </Link>
                </ForwardRef(renderLink)>
              </ForwardRef(ButtonBase)>
            </WithStyles(ForwardRef(ButtonBase))>
          </ForwardRef(ListItem)>
        </WithStyles(ForwardRef(ListItem))>
      </li>
    </ListItemLink>
  </Router>
</MemoryRouter>
`;

exports[`renders without crashing 2`] = `
<MemoryRouter
  initialEntries={
    Array [
      Object {
        "key": "testKey",
        "pathname": "/",
      },
    ]
  }
>
  <Router
    history={
      Object {
        "action": "POP",
        "block": [Function],
        "canGo": [Function],
        "createHref": [Function],
        "entries": Array [
          Object {
            "hash": "",
            "key": "testKey",
            "pathname": "/",
            "search": "",
          },
        ],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "index": 0,
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "key": "testKey",
          "pathname": "/",
          "search": "",
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <ListItemLink
      primary="Home"
      to="/"
    >
      <li>
        <WithStyles(ForwardRef(ListItem))
          button={true}
          component={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "render": [Function],
            }
          }
        >
          <ForwardRef(ListItem)
            button={true}
            classes={
              Object {
                "alignItemsFlexStart": "MuiListItem-alignItemsFlexStart",
                "button": "MuiListItem-button",
                "container": "MuiListItem-container",
                "dense": "MuiListItem-dense",
                "disabled": "Mui-disabled",
                "divider": "MuiListItem-divider",
                "focusVisible": "Mui-focusVisible",
                "gutters": "MuiListItem-gutters",
                "root": "MuiListItem-root",
                "secondaryAction": "MuiListItem-secondaryAction",
                "selected": "Mui-selected",
              }
            }
            component={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "render": [Function],
              }
            }
          >
            <WithStyles(ForwardRef(ButtonBase))
              className="MuiListItem-root MuiListItem-gutters MuiListItem-button"
              component={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "render": [Function],
                }
              }
              disabled={false}
              focusVisibleClassName="Mui-focusVisible"
            >
              <ForwardRef(ButtonBase)
                className="MuiListItem-root MuiListItem-gutters MuiListItem-button"
                classes={
                  Object {
                    "disabled": "Mui-disabled",
                    "focusVisible": "Mui-focusVisible",
                    "root": "MuiButtonBase-root",
                  }
                }
                component={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "render": [Function],
                  }
                }
                disabled={false}
                focusVisibleClassName="Mui-focusVisible"
              >
                <ForwardRef(renderLink)
                  aria-disabled={false}
                  className="MuiButtonBase-root MuiListItem-root MuiListItem-gutters MuiListItem-button"
                  onBlur={[Function]}
                  onDragLeave={[Function]}
                  onFocus={[Function]}
                  onKeyDown={[Function]}
                  onKeyUp={[Function]}
                  onMouseDown={[Function]}
                  onMouseLeave={[Function]}
                  onMouseUp={[Function]}
                  onTouchEnd={[Function]}
                  onTouchMove={[Function]}
                  onTouchStart={[Function]}
                  role="button"
                  tabIndex={0}
                >
                  <Link
                    aria-disabled={false}
                    className="MuiButtonBase-root MuiListItem-root MuiListItem-gutters MuiListItem-button"
                    onBlur={[Function]}
                    onDragLeave={[Function]}
                    onFocus={[Function]}
                    onKeyDown={[Function]}
                    onKeyUp={[Function]}
                    onMouseDown={[Function]}
                    onMouseLeave={[Function]}
                    onMouseUp={[Function]}
                    onTouchEnd={[Function]}
                    onTouchMove={[Function]}
                    onTouchStart={[Function]}
                    role="button"
                    tabIndex={0}
                    to="/"
                  >
                    <LinkAnchor
                      aria-disabled={false}
                      className="MuiButtonBase-root MuiListItem-root MuiListItem-gutters MuiListItem-button"
                      href="/"
                      navigate={[Function]}
                      onBlur={[Function]}
                      onDragLeave={[Function]}
                      onFocus={[Function]}
                      onKeyDown={[Function]}
                      onKeyUp={[Function]}
                      onMouseDown={[Function]}
                      onMouseLeave={[Function]}
                      onMouseUp={[Function]}
                      onTouchEnd={[Function]}
                      onTouchMove={[Function]}
                      onTouchStart={[Function]}
                      role="button"
                      tabIndex={0}
                    >
                      <a
                        aria-disabled={false}
                        className="MuiButtonBase-root MuiListItem-root MuiListItem-gutters MuiListItem-button"
                        href="/"
                        onBlur={[Function]}
                        onClick={[Function]}
                        onDragLeave={[Function]}
                        onFocus={[Function]}
                        onKeyDown={[Function]}
                        onKeyUp={[Function]}
                        onMouseDown={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                        onTouchEnd={[Function]}
                        onTouchMove={[Function]}
                        onTouchStart={[Function]}
                        role="button"
                        tabIndex={0}
                      >
                        <WithStyles(ForwardRef(Typography))
                          display="block"
                          key=".0"
                          variant="button"
                        >
                          <ForwardRef(Typography)
                            classes={
                              Object {
                                "alignCenter": "MuiTypography-alignCenter",
                                "alignJustify": "MuiTypography-alignJustify",
                                "alignLeft": "MuiTypography-alignLeft",
                                "alignRight": "MuiTypography-alignRight",
                                "body1": "MuiTypography-body1",
                                "body2": "MuiTypography-body2",
                                "button": "MuiTypography-button",
                                "caption": "MuiTypography-caption",
                                "colorError": "MuiTypography-colorError",
                                "colorInherit": "MuiTypography-colorInherit",
                                "colorPrimary": "MuiTypography-colorPrimary",
                                "colorSecondary": "MuiTypography-colorSecondary",
                                "colorTextPrimary": "MuiTypography-colorTextPrimary",
                                "colorTextSecondary": "MuiTypography-colorTextSecondary",
                                "displayBlock": "MuiTypography-displayBlock",
                                "displayInline": "MuiTypography-displayInline",
                                "gutterBottom": "MuiTypography-gutterBottom",
                                "h1": "MuiTypography-h1",
                                "h2": "MuiTypography-h2",
                                "h3": "MuiTypography-h3",
                                "h4": "MuiTypography-h4",
                                "h5": "MuiTypography-h5",
                                "h6": "MuiTypography-h6",
                                "noWrap": "MuiTypography-noWrap",
                                "overline": "MuiTypography-overline",
                                "paragraph": "MuiTypography-paragraph",
                                "root": "MuiTypography-root",
                                "srOnly": "MuiTypography-srOnly",
                                "subtitle1": "MuiTypography-subtitle1",
                                "subtitle2": "MuiTypography-subtitle2",
                              }
                            }
                            display="block"
                            variant="button"
                          >
                            <span
                              className="MuiTypography-root MuiTypography-button MuiTypography-displayBlock"
                            >
                              Home
                            </span>
                          </ForwardRef(Typography)>
                        </WithStyles(ForwardRef(Typography))>
                        <WithStyles(memo)
                          center={false}
                        >
                          <ForwardRef(TouchRipple)
                            center={false}
                            classes={
                              Object {
                                "child": "MuiTouchRipple-child",
                                "childLeaving": "MuiTouchRipple-childLeaving",
                                "childPulsate": "MuiTouchRipple-childPulsate",
                                "ripple": "MuiTouchRipple-ripple",
                                "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                "rippleVisible": "MuiTouchRipple-rippleVisible",
                                "root": "MuiTouchRipple-root",
                              }
                            }
                          >
                            <span
                              className="MuiTouchRipple-root"
                            >
                              <TransitionGroup
                                childFactory={[Function]}
                                component={null}
                                exit={true}
                              />
                            </span>
                          </ForwardRef(TouchRipple)>
                        </WithStyles(memo)>
                      </a>
                    </LinkAnchor>
                  </Link>
                </ForwardRef(renderLink)>
              </ForwardRef(ButtonBase)>
            </WithStyles(ForwardRef(ButtonBase))>
          </ForwardRef(ListItem)>
        </WithStyles(ForwardRef(ListItem))>
      </li>
    </ListItemLink>
  </Router>
</MemoryRouter>
`;
